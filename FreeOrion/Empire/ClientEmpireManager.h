
#ifndef _ClientEmpireManager_h_
#define _ClientEmpireManager_h_

#ifndef _EmpireManager_h_
#include "EmpireManager.h"
#endif

/**
* ClientEmpire is the client version of the EmpireManager.
* It supports methods to handle the turn updates which are generated by 
* ServerEmpire
*
*/
class ClientEmpireManager : public EmpireManager
{
public:
    /** \name Constructors */ //@{

    /// Creates an empty Client empire manager.
    ClientEmpireManager();
   
   //@}
   
   /** \name Mutators */ //@{
   
   /// Handles Empire state updates from server.
    /**
    *  Handles an update for this client.  
    *  The XMLElement should be one produced by ServerEmpire::CreateClientEmpireUpdate()
    *
    *  The client manager will be updated to reflect the empire state specified
    *  by ServerEmpire.  Empires will be created, removed, or modified until
    *  the empires in this manager match those in the server manager.
    *
    *   DANGER: This method will cause all empires in the manager to be
    *      deallocated and recreated.  Pointers to Empires will not be valid
    *      after an update is handled.  Do not use pointers to empires!  store
    *      the things by their IDs instead.
    */
    bool HandleEmpireElementUpdate( GG::XMLElement empireElement);


    /// Encodes current empire knowledge to XML for use in determining update diffs
    GG::XMLElement EncodeEmpires( );

    /// Handles SitRep updates from server.
    /**
    *  Takes an XMLElement representing a list of sitrep events
    *  The list will be decoded, one entry at a time, and the entries
    *  will be added to the sitrep of the empire to whom they belong.
    * 
    *  The XMLElement passed into this method should be identical to
    *  that generated by ServerEmpire::CreateClientSitrepUpdate()
    *
    *  This method is depracated.  It does nothing
    *
    */
    //bool HandleSitRepElementUpdate( GG::XMLElement sitRepElement);

    //@}

private:
    
};


#endif


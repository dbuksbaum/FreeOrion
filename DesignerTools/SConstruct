# -*- Python -*-

import os
platform_str = "%s" % Platform()

# posix
if platform_str == 'posix':
    print 'POSIX platform detected ...'
    fo_dir = '../FreeOrion/'
    gg_dir = '../GG/'
    cpppath = ['/usr/local/include/boost-1_32',
               '/usr/include/SDL',
               '/usr/include/freetype2',
               gg_dir + 'include',
               gg_dir + 'include/dialogs',
               gg_dir + 'include/net',
               gg_dir + 'include/SDL']
    libs = ['GiGi',
            'GiGiNet',
            'GiGiSDL']
    libpath = ['/usr/local/lib']
    env = Environment(ENV = {'PATH' : os.environ['PATH'],
                             'HOME' : os.environ['HOME']},
                      CCFLAGS = '-g -DFREEORION_BUILD_UTIL',
                      CPPPATH = cpppath,
                      LIBS = libs,
                      LIBPATH = libpath)
    if ARGUMENTS.get('ccache', 1):
        print 'Using ccache to perform build; if this is undesirable, execute as "scons ccache=0"'
        env['CXX'] = 'ccache ' + env['CXX']


# windows
if platform_str == 'win32':
    print 'Win32 platform detected ...'
    fo_dir = '../FreeOrion/'
    gg_dir = '../FreeOrion/GG/'
    cpppath = ['C:/log4cpp-0.3.4b/include',
               'C:/Boost/include/boost-1_32',
               'C:/SDL-1.2.7/include',
               'C:/zlib/include',
               gg_dir + 'include',
               gg_dir + 'include/net']
    libs = ['GiGi',
            'GiGiSDL',
            'GiGiNet',
            'SDL',
            'log4cpp',
            'zdll',
            'opengl32',
            'glu32']
    libpath = ['C:/Boost/lib',
               'C:/log4cpp-0.3.4b/msvc6/log4cppDLL/Release',
               'C:/zlib/lib',
               'C:/SDL-1.2.7/lib',
               gg_dir + 'msvc/GG/GiGi/Release',
               gg_dir + 'msvc/GG/GiGiNet/Release',
               gg_dir + 'msvc/GG/GiGiSDL/Release']
    env = Environment(CCFLAGS = '/Gd /TP /EHsc /MD /GR /Zc:forScope /DFREEORION_BUILD_UTIL /DFREEORION_WIN32 /DWIN32 /D_DEBUG /D_WINDOWS /wd4099 /wd4251 /wd4800 /wd4267 /wd4275 /wd4244 /wd4101 /wd4258',
                      CPPPATH = cpppath,
                      LIBS = libs,
                      LIBPATH = libpath,
                      LINKFLAGS = '/NODEFAULTLIB:MSVCRTD')

common_source = [fo_dir + 'Empire/Empire.cpp',
                 fo_dir + 'Empire/EmpireManager.cpp',
                 fo_dir + 'Empire/ResourcePool.cpp',
                 fo_dir + 'universe/Building.cpp',
                 fo_dir + 'universe/Condition.cpp',
                 fo_dir + 'universe/Effect.cpp',
                 fo_dir + 'universe/Fleet.cpp',
                 fo_dir + 'universe/Meter.cpp',
                 fo_dir + 'universe/Planet.cpp',
                 fo_dir + 'universe/PopCenter.cpp',
                 fo_dir + 'universe/Predicates.cpp',
                 fo_dir + 'universe/ProdCenter.cpp',
                 fo_dir + 'universe/Ship.cpp',
                 fo_dir + 'universe/ShipDesign.cpp',
                 fo_dir + 'universe/Special.cpp',
                 fo_dir + 'universe/System.cpp',
                 fo_dir + 'universe/Universe.cpp',
                 fo_dir + 'universe/UniverseObject.cpp',
                 fo_dir + 'universe/ValueRef.cpp',
                 fo_dir + 'util/AppInterface.cpp',
                 fo_dir + 'util/DataTable.cpp',
                 fo_dir + 'util/GZStream.cpp',
                 fo_dir + 'util/MultiplayerCommon.cpp',
                 fo_dir + 'util/md5.c',
                 fo_dir + 'util/OptionsDB.cpp',
                 fo_dir + 'util/Order.cpp',
                 fo_dir + 'util/OrderSet.cpp',
                 fo_dir + 'util/Random.cpp',
                 fo_dir + 'util/SitRepEntry.cpp',
                 fo_dir + 'universe/Tech.cpp',
                 fo_dir + 'util/VarText.cpp',
                 fo_dir + 'UI/StringTable.cpp']

common_gui_source = [fo_dir + 'UI/BSpline.cpp',
                     fo_dir + 'UI/ClientUI.cpp',
                     fo_dir + 'UI/CUIControls.cpp',
                     fo_dir + 'UI/CUIDrawUtil.cpp',
                     fo_dir + 'UI/CUI_Wnd.cpp',
                     fo_dir + 'UI/LinkText.cpp',
                     fo_dir + 'UI/ToolContainer.cpp',
                     fo_dir + 'UI/ToolWnd.cpp']

tech_view_source = ['tech-view.cpp',
                    fo_dir + 'UI/TechWnd.cpp',
                    fo_dir + 'UI/vcg/grprint.cpp',
                    fo_dir + 'UI/vcg/main.cpp',
                    fo_dir + 'UI/vcg/alloc.c',
                    fo_dir + 'UI/vcg/draw.c',
                    fo_dir + 'UI/vcg/drawlib.c',
                    fo_dir + 'UI/vcg/drawstr.c',
                    fo_dir + 'UI/vcg/fisheye.c',
                    fo_dir + 'UI/vcg/folding.c',
                    fo_dir + 'UI/vcg/lex.yy.c',
                    fo_dir + 'UI/vcg/options.c',
                    fo_dir + 'UI/vcg/prepare.c',
                    fo_dir + 'UI/vcg/step0.c',
                    fo_dir + 'UI/vcg/step1.c',
                    fo_dir + 'UI/vcg/step2.c',
                    fo_dir + 'UI/vcg/step3.c',
                    fo_dir + 'UI/vcg/step4.c',
                    fo_dir + 'UI/vcg/timelim.c',
                    fo_dir + 'UI/vcg/tree.c',
                    fo_dir + 'UI/vcg/y.tab.c']

env.Program(target = 'tech-check', source = ['tech-check.cpp'] + common_source)
env.Program(target = 'building-check', source = ['building-check.cpp'] + common_source)
env.Program(target = 'tech-view', source = tech_view_source + common_gui_source + common_source)

TargetSignatures('content')

SetOption('implicit_cache', 1)
